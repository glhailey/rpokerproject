"0",""
"0","scoreHighCard <- function(oneHand) {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  if(wildCardCount){"
"0","    high = 14"
"0","    wildCardCount <- wildCardCount - 1"
"0","  } else {"
"0","    high = max(oneHand)"
"0","  }"
"0","  "
"0","  if(wildCardCount){"
"0","    kicker = 14"
"0","  } else {"
"0","    kicker = max(oneHand[-which(oneHand==high)[1]])"
"0","  }"
"0","	"
"0","  high / 28 + kicker / (28*28)"
"0","}"
"0",""
"0",""
"0","scorePairRanker <- function(oneHand) {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0",""
"0","  oneHand <- sort(oneHand,decreasing=TRUE)"
"0","  "
"0","  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  rankValues <- append(14,rle(oneHand)$values)"
"0","				#the unique ranks"
"0","	rankLengths <- append(0,rle(oneHand)$lengths)"
"0","				#the length of the unique ranks"
"0","	"
"0","	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])"
"0","				# where the wildcards and the cards in the hand make the greatest pair"
"0","	wildCardCount <- wildCardCount - (2 - rankLengths[which(rankValues == pairRank[1])])"
"0",""
"0","	kicker <- rankValues[rankValues != pairRank[1] & (rankLengths + wildCardCount) >= 1 ]"
"0","	"
"0","	 score <- { "
"0","	   (if (length(pairRank)) pairRank[1]/28 else 0 ) + "
"0","	   (if(length(kicker)) max(kicker)/(28*28) else 0)"
"0","   }"
"0","				# return the incremental value of the pair, that is the highest pair plus the value of the kicker."
"0","	"
"0","	score"
"0","}"
"0",""
"0",""
"0",""
"0","scoreTwoPairRanker <- function(oneHand) {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)"
"0","  "
"0","  run <- rle(oneHand)"
"0","  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  if(run$values[1]!=14){"
"0","      rankValues <- append(14,run$values)"
"0","	    rankLengths <- append(0,run$lengths)"
"0","  } else {"
"0","     rankValues <- run$values"
"0","     rankLengths <- run$lengths"
"0","  }"
"0","  "
"0","	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])"
"0","				# where the wildcards and the cards in the hand make a pair"
"0","	"
"0","	validPair <- function(p) {"
"0","	  w <- wildCardCount - max(2 - rankLengths[which(rankValues == p[1])] , 0) # Find wildcards used "
"0","	  "
"0","	  #print(paste(p[1] ,"", "" ,p[2], "" "", w))"
"0","	  "
"0","	  (rankLengths[which(rankValues == p[2])] + w >= 2)"
"0","	}"
"0","	"
"0","	if (length(pairRank) < 2) {"
"0","	  0"
"0","	} else {"
"0","  	pairEnumerations <- combn(pairRank,2, FUN = NULL)"
"0","  	#print(""E\n"")"
"0","  	#print(pairEnumerations)"
"0","  	pairEnumerations <- matrix(pairEnumerations[,apply(pairEnumerations, 2, validPair)], byrow = TRUE)#matrix(pairEnumerations[,apply(pairEnumerations, 2, validPair)], nrow = 2, byrow = TRUE)"
"0","  	      # Every pair of possible pairsprint(pairEnumerations)"
"0","    if (length(pairEnumerations)) {"
"0","      #print(pairEnumerations)"
"0","  	        # Filter by validity    "
"0","  	   "
"0","  	  twoPair = pairEnumerations[,which.max(apply(pairEnumerations, 2, function(p) {sum(p)}))]"
"0","  	      "
"0","  	  twoPair[1]/28 + twoPair[2]/(28*28)"
"0","             # return the incremental value of the greatest pair of pairs"
"0","    } else 0"
"0","	}"
"0","}"
"0","scoreTwoPairRanker(data.frame(ranks = c(1,1,2,3,4,-1,-1))) * 28"
"1","[1]"
"1"," 14.03571"
"1","
"
"0","scoreTwoPairRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28"
"1","[1]"
"1"," 5.142857"
"1","
"
"0","scoreTwoPairRanker(data.frame(ranks = c(1,1,2,3,4,5,-1))) * 28"
"1","[1]"
"1"," 5.035714"
"1","
"
"0","scoreTwoPairRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreTripRanker <- function(oneHand)  {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)"
"0","  "
"0","  run <- rle(oneHand)"
"0"," # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  if(run$values[1]!=14){"
"0","      rankValues <- append(14,run$values)"
"0","	    rankLengths <- append(0,run$lengths)"
"0","  } else {"
"0","     rankValues <- run$values"
"0","     rankLengths <- run$lengths"
"0","  }"
"0","  "
"0","	tripRank <- (rankValues[(rankLengths + wildCardCount) >= 3])"
"0","				# where the wildcards and the cards in the hand make a pair"
"0","	"
"0","	if (length(tripRank)) {"
"0","	  max(tripRank) / 28"
"0","	} else 0"
"0","}"
"0","scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28"
"1","[1]"
"1"," 5"
"1","
"
"0","scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,5,-1,-1,-1))) * 28"
"1","[1]"
"1"," 14"
"1","
"
"0","scoreQuadRanker <- function(oneHand)  {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)"
"0","  "
"0","  run <- rle(oneHand)"
"0","  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  rankValues <- append(14,run$values)"
"0","				#the unique ranks"
"0","	rankLengths <- append(0,run$lengths)"
"0","				#the length of the unique ranks"
"0","	"
"0","	quadRank <- (rankValues[(rankLengths + wildCardCount) >= 4])"
"0","				# where the wildcards and the cards in the hand make a pair"
"0","	"
"0","	if (length(quadRank)) {"
"0","	  max(quadRank) / 28"
"0","	} else 0"
"0","}"
"0","scoreQuadRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1,-1))) * 28"
"1","[1]"
"1"," 5"
"1","
"
"0","scoreQuadRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreQuadRanker(data.frame(ranks = c(1,2,3,4,6,5,-1,-1,-1))) * 28"
"1","[1]"
"1"," 6"
"1","
"
"0","scoreFullHouseRanker <- function(oneHand)  {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)"
"0","  "
"0","  run <- rle(oneHand)"
"0","  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  if(run$values[1]!=14){"
"0","      rankValues <- append(14,run$values)"
"0","	    rankLengths <- append(0,run$lengths)"
"0","  } else {"
"0","     rankValues <- run$values"
"0","     rankLengths <- run$lengths"
"0","  }"
"0","  "
"0","	"
"0","	tripRank <- (rankValues[(rankLengths + wildCardCount) >= 3])"
"0","	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])"
"0","	"
"0","	houses <- data.matrix(expand.grid(tripRank, pairRank))"
"0","	"
"0","	if (length(houses)) {"
"0","	  "
"0","	  validHouse <- function(house){"
"0","	    w <- wildCardCount - max(3 - rankLengths[which(rankValues == house[1])], 0)"
"0","	      # Number of wildcards left after constructing the full part of the house"
"0","	    #print(paste(house[1],"", "",house[2],"" : "",w, "" : "",which(rankValues == house[1]) ,"" : "" , rankLengths[which(rankValues == house[1])]))"
"0","	    "
"0","	    house[1] != house[2] && (w + rankLengths[which(rankValues == house[2])] >= 2)"
"0","	  }"
"0",""
"0","	  houses <- matrix(houses[apply(houses, 1, validHouse)], byrow = FALSE, ncol = 2)"
"0","	  "
"0","	  #print(houses)"
"0","	  "
"0","	  if(length(houses)) {"
"0","	    house <- houses[which.max(apply(houses,1, function(x) {x[1]+x[2]/16})), ]"
"0","	    house[1] / 28 + house[2] / (28*28)"
"0","	  } else 0"
"0","	} else 0"
"0","}"
"0",""
"0","scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,6,7))) * 28"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1,-1))) * 28"
"1","[1]"
"1"," 5.142857"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(1,2,3,5,5,-1,-1,-1))) * 28"
"1","[1]"
"1"," 14.17857"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(3,3,3,4,4,-1,-1))) * 28"
"1","[1]"
"1"," 4.107143"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(3,3,3,2,2,-1,-1))) * 28"
"1","[1]"
"1"," 3.5"
"1","
"
"0","scoreFullHouseRanker(data.frame(ranks = c(14,14,10,14,11,10,8))) * 28"
"1","[1]"
"1"," 14.35714"
"1","
"
"0","scoreStraightRanker <- function(oneHand)  {"
"0","  oneHand <- oneHand$ranks"
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  "
"0","  if(wildCardCount > 5){"
"0","    return(14/28)    "
"0","  }"
"0","  "
"0","  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)"
"0","  run <- rle(oneHand)"
"0","  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards"
"0","  if(run$values[1]!=14){"
"0","      rankValues <- append(14,run$values)"
"0","	    rankLengths <- append(0,run$lengths)"
"0","  } else {"
"0","     rankValues <- run$values"
"0","     rankLengths <- run$lengths"
"0","  }"
"0","	"
"0","	for(startIndex in 1:length(rankValues)){"
"0","    straightRun <- 1"
"0","          # Always starts with the first card"
"0","    "
"0","    lastRank <- rankValues[startIndex]"
"0","    degreesOfFreedom <- wildCardCount"
"0","    "
"0","    i <- startIndex + 1"
"0","    "
"0","	  while(i <= length(rankValues) && (straightRun + degreesOfFreedom < 5)) {"
"0","	    cardRun <- lastRank - rankValues[i]"
"0","	            # Number of cards to test"
"0","	    if(cardRun < 0){"
"0","	      cardRun <- lastRank - 1"
"0","	            # For the case of Ace low"
"0","	    }"
"0","	    "
"0","	    degreesOfFreedom <- degreesOfFreedom - (cardRun-1)"
"0","      if(degreesOfFreedom < 0){"
"0","        break"
"0","      }"
"0","	    straightRun <- straightRun + cardRun"
"0","	    "
"0","	    lastRank = rankValues[i]"
"0","      i <- i+1"
"0","	  }"
"0","    "
"0","    if((straightRun + degreesOfFreedom >= 5)){"
"0","      return(min(14,rankValues[startIndex]+degreesOfFreedom))"
"0","    }"
"0","	}"
"0","	"
"0","	0"
"0","}"
"0",""
"0","scoreStraightRanker(data.frame(ranks = c(2,3,4,5,8,14)))"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreStraightRanker(data.frame(ranks = c(2,3,4,5,6,8)))"
"1","[1]"
"1"," 6"
"1","
"
"0","scoreStraightRanker(data.frame(ranks = c(2,3,4,5,6,8,-1)))"
"1","[1]"
"1"," 8"
"1","
"
"0","scoreFlushRanker <- function(oneHand) {"
"0","  oneHand <- oneHand$suits"
"0","  "
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  "
"0","  flushCount <- apply(matrix(c(1,2,3,4)), 1, function(x) {sum(oneHand==x)})"
"0","  "
"0","  0.5 * (sum(flushCount+wildCardCount >= 5) > 0)"
"0","}"
"0","scoreFlushRanker(data.frame(suits = c(1,1,1,1,1,2,2)))"
"1","[1]"
"1"," 0.5"
"1","
"
"0","scoreFlushRanker(data.frame(suits = c(-1,-1,-1,-1,2,3)))"
"1","[1]"
"1"," 0.5"
"1","
"
"0","scoreFlushRanker(data.frame(suits = c(1,1,1,1,-1,2,2)))"
"1","[1]"
"1"," 0.5"
"1","
"
"0","scoreFlushRanker(data.frame(suits = c(1,2,3,4,-1,3,2)))"
"1","[1]"
"1"," 0"
"1","
"
"0","# This is now correct"
"0","scoreStraightFlushRanker <- function(oneHand)  {"
"0","  suits <- oneHand$suits"
"0","  oneHand <- oneHand$ranks"
"0","  "
"0","  wildCardCount <- sum(oneHand == -1)"
"0","  "
"0","  if(wildCardCount > 5){"
"0","    return(14/28)    "
"0","  }"
"0","  "
"0","  suits <- suits[oneHand != -1]"
"0","  oneHand <- oneHand[oneHand != -1]"
"0","  "
"0","  ordering = order(oneHand, decreasing=TRUE)  "
"0","  "
"0","  oneHand <- oneHand[ordering]"
"0","  suits <- suits[ordering]"
"0","  #print(suits)"
"0","  "
"0","  "
"0","  suits <- append(suits, suits[which(oneHand == 14)])"
"0","	oneHand <- append(oneHand,oneHand[which(oneHand == 14)])"
"0","	        # Handle the case of ace low"
"0",""
"0","	for(startIndex in 1:length(oneHand)){"
"0","    straightRun <- 1"
"0","          # Always starts with the first card"
"0","    "
"0","    suit <- suits[startIndex]"
"0","    lastRank <- oneHand[startIndex]"
"0","    "
"0","    degreesOfFreedom <- wildCardCount"
"0","    "
"0","    i <- startIndex + 1"
"0","    while(i+1 <= length(oneHand) && oneHand[i] == lastRank){"
"0","	      i <- i+1"
"0","	  }	"
"0","    "
"0","    "
"0","	  while(i <= length(oneHand) && (straightRun + degreesOfFreedom < 5)) {"
"0","	    valid <- FALSE"
"0","	    rank <- oneHand[i]"
"0","	    "
"0","	    while(i <= length(oneHand) && oneHand[i] == rank){"
"0","	      if (suits[i]==suit) {valid <- TRUE}"
"0","	      i <- i+1"
"0","	    }	 "
"0",""
"0","	    cardRun <- lastRank - rank"
"0","	            # Number of cards to test"
"0","	    if(cardRun < 0){"
"0","	      cardRun <- lastRank - 1"
"0","	            # For the case of Ace low"
"0","	    }"
"0","	    "
"0","	    degreesOfFreedom <- degreesOfFreedom - (cardRun-valid) # Subtract the current card from the valid run only if it's of the right suit"
"0","      if(degreesOfFreedom < 0){"
"0","        break"
"0","      }"
"0","	    straightRun <- straightRun + cardRun"
"0","	    "
"0","	    lastRank = rank"
"0","	  }"
"0","    "
"0","    if((straightRun + degreesOfFreedom >= 5)){"
"0","      return(min(14,oneHand[startIndex]+degreesOfFreedom))"
"0","    }"
"0","	}"
"0","	"
"0","	0"
"0","}"
"0","scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,2,1,1), ranks = c(2,3,4,5,6,7,8) ))"
"1","[1]"
"1"," 0"
"1","
"
"0","scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,1,1,2), ranks = c(2,3,4,5,6,7,8) ))"
"1","[1]"
"1"," 7"
"1","
"
"0","scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,-1,2,2), ranks = c(2,3,4,5,-1,7,8) ))"
"1","[1]"
"1"," 6"
"1","
"
