---
title: "Poker"
output: html_notebook
---

```{r}
library("poker")
```

```{r}
testRoundOfPoker()
```

I don't like the way the poker simulation handles comparing hands. I've reimplemented it from scratch

```{r} 

scoreHighCard <- function(oneHand) {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  if(wildCardCount){
    high = 14
    wildCardCount <- wildCardCount - 1
  } else {
    high = max(oneHand)
  }
  
  if(wildCardCount){
    kicker = 14
  } else {
    kicker = max(oneHand[-which(oneHand==high)[1]])
  }
	
  high / 28 + kicker / (28*28)
}


scorePairRanker <- function(oneHand) {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)

  oneHand <- sort(oneHand,decreasing=TRUE)
  
  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  rankValues <- append(14,rle(oneHand)$values)
				#the unique ranks
	rankLengths <- append(0,rle(oneHand)$lengths)
				#the length of the unique ranks
	
	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])
				# where the wildcards and the cards in the hand make the greatest pair
	wildCardCount <- wildCardCount - (2 - rankLengths[which(rankValues == pairRank[1])])

	kicker <- rankValues[rankValues != pairRank[1] & (rankLengths + wildCardCount) >= 1 ]
	
	 score <- { 
	   (if (length(pairRank)) pairRank[1]/28 else 0 ) + 
	   (if(length(kicker)) max(kicker)/(28*28) else 0)
   }
				# return the incremental value of the pair, that is the highest pair plus the value of the kicker.
	
	score
}



scoreTwoPairRanker <- function(oneHand) {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)
  
  run <- rle(oneHand)
  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  if(run$values[1]!=14){
      rankValues <- append(14,run$values)
	    rankLengths <- append(0,run$lengths)
  } else {
     rankValues <- run$values
     rankLengths <- run$lengths
  }
  
	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])
				# where the wildcards and the cards in the hand make a pair
	
	validPair <- function(p) {
	  w <- wildCardCount - max(2 - rankLengths[which(rankValues == p[1])] , 0) # Find wildcards used 
	  
	  #print(paste(p[1] ,", " ,p[2], " ", w))
	  
	  (rankLengths[which(rankValues == p[2])] + w >= 2)
	}
	
	if (length(pairRank) < 2) {
	  0
	} else {
  	pairEnumerations <- combn(pairRank,2, FUN = NULL)
  	#print("E\n")
  	#print(pairEnumerations)
  	pairEnumerations <- matrix(pairEnumerations[,apply(pairEnumerations, 2, validPair)], byrow = TRUE)#matrix(pairEnumerations[,apply(pairEnumerations, 2, validPair)], nrow = 2, byrow = TRUE)
  	      # Every pair of possible pairsprint(pairEnumerations)
    if (length(pairEnumerations)) {
      #print(pairEnumerations)
  	        # Filter by validity    
  	   
  	  twoPair = pairEnumerations[,which.max(apply(pairEnumerations, 2, function(p) {sum(p)}))]
  	      
  	  twoPair[1]/28 + twoPair[2]/(28*28)
             # return the incremental value of the greatest pair of pairs
    } else 0
	}
}
scoreTwoPairRanker(data.frame(ranks = c(1,1,2,3,4,-1,-1))) * 28
scoreTwoPairRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28
scoreTwoPairRanker(data.frame(ranks = c(1,1,2,3,4,5,-1))) * 28
scoreTwoPairRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28

scoreTripRanker <- function(oneHand)  {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)
  
  run <- rle(oneHand)
 # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  if(run$values[1]!=14){
      rankValues <- append(14,run$values)
	    rankLengths <- append(0,run$lengths)
  } else {
     rankValues <- run$values
     rankLengths <- run$lengths
  }
  
	tripRank <- (rankValues[(rankLengths + wildCardCount) >= 3])
				# where the wildcards and the cards in the hand make a pair
	
	if (length(tripRank)) {
	  max(tripRank) / 28
	} else 0
}
scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28
scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28
scoreTripRanker(data.frame(ranks = c(1,2,3,4,5,5,-1,-1,-1))) * 28

scoreQuadRanker <- function(oneHand)  {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)
  
  run <- rle(oneHand)
  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  rankValues <- append(14,run$values)
				#the unique ranks
	rankLengths <- append(0,run$lengths)
				#the length of the unique ranks
	
	quadRank <- (rankValues[(rankLengths + wildCardCount) >= 4])
				# where the wildcards and the cards in the hand make a pair
	
	if (length(quadRank)) {
	  max(quadRank) / 28
	} else 0
}
scoreQuadRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1,-1))) * 28
scoreQuadRanker(data.frame(ranks = c(1,2,3,4,5,-1))) * 28
scoreQuadRanker(data.frame(ranks = c(1,2,3,4,6,5,-1,-1,-1))) * 28

scoreFullHouseRanker <- function(oneHand)  {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)
  
  run <- rle(oneHand)
  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  if(run$values[1]!=14){
      rankValues <- append(14,run$values)
	    rankLengths <- append(0,run$lengths)
  } else {
     rankValues <- run$values
     rankLengths <- run$lengths
  }
  
	
	tripRank <- (rankValues[(rankLengths + wildCardCount) >= 3])
	pairRank <- (rankValues[(rankLengths + wildCardCount) >= 2])
	
	houses <- data.matrix(expand.grid(tripRank, pairRank))
	
	if (length(houses)) {
	  
	  validHouse <- function(house){
	    w <- wildCardCount - max(3 - rankLengths[which(rankValues == house[1])], 0)
	      # Number of wildcards left after constructing the full part of the house
	    #print(paste(house[1],", ",house[2]," : ",w, " : ",which(rankValues == house[1]) ," : " , rankLengths[which(rankValues == house[1])]))
	    
	    house[1] != house[2] && (w + rankLengths[which(rankValues == house[2])] >= 2)
	  }

	  houses <- matrix(houses[apply(houses, 1, validHouse)], byrow = FALSE, ncol = 2)
	  
	  #print(houses)
	  
	  if(length(houses)) {
	    house <- houses[which.max(apply(houses,1, function(x) {x[1]+x[2]/16})), ]
	    house[1] / 28 + house[2] / (28*28)
	  } else 0
	} else 0
}

scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,6,7))) * 28
scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1))) * 28
scoreFullHouseRanker(data.frame(ranks = c(1,2,3,4,5,-1,-1,-1))) * 28
scoreFullHouseRanker(data.frame(ranks = c(1,2,3,5,5,-1,-1,-1))) * 28
scoreFullHouseRanker(data.frame(ranks = c(3,3,3,4,4,-1,-1))) * 28
scoreFullHouseRanker(data.frame(ranks = c(3,3,3,2,2,-1,-1))) * 28
scoreFullHouseRanker(data.frame(ranks = c(14,14,10,14,11,10,8))) * 28


scoreStraightRanker <- function(oneHand)  {
  oneHand <- oneHand$ranks
  wildCardCount <- sum(oneHand == -1)
  
  if(wildCardCount > 5){
    return(14/28)    
  }
  
  oneHand <- sort(oneHand[oneHand != -1],decreasing=TRUE)
  run <- rle(oneHand)
  # Add a 14 rank of length 0 to the run. This comes into play with multiple wildcards
  if(run$values[1]!=14){
      rankValues <- append(14,run$values)
	    rankLengths <- append(0,run$lengths)
  } else {
     rankValues <- run$values
     rankLengths <- run$lengths
  }
	
	for(startIndex in 1:length(rankValues)){
    straightRun <- 1
          # Always starts with the first card
    
    lastRank <- rankValues[startIndex]
    degreesOfFreedom <- wildCardCount
    
    i <- startIndex + 1
    
	  while(i <= length(rankValues) && (straightRun + degreesOfFreedom < 5)) {
	    cardRun <- lastRank - rankValues[i]
	            # Number of cards to test
	    if(cardRun < 0){
	      cardRun <- lastRank - 1
	            # For the case of Ace low
	    }
	    
	    degreesOfFreedom <- degreesOfFreedom - (cardRun-1)
      if(degreesOfFreedom < 0){
        break
      }
	    straightRun <- straightRun + cardRun
	    
	    lastRank = rankValues[i]
      i <- i+1
	  }
    
    if((straightRun + degreesOfFreedom >= 5)){
      return(min(14,rankValues[startIndex]+degreesOfFreedom))
    }
	}
	
	0
}

scoreStraightRanker(data.frame(ranks = c(2,3,4,5,8,14)))
scoreStraightRanker(data.frame(ranks = c(2,3,4,5,6,8)))
scoreStraightRanker(data.frame(ranks = c(2,3,4,5,6,8,-1)))

scoreFlushRanker <- function(oneHand) {
  oneHand <- oneHand$suits
  
  wildCardCount <- sum(oneHand == -1)
  
  flushCount <- apply(matrix(c(1,2,3,4)), 1, function(x) {sum(oneHand==x)})
  
  0.5 * (sum(flushCount+wildCardCount >= 5) > 0)
}
scoreFlushRanker(data.frame(suits = c(1,1,1,1,1,2,2)))
scoreFlushRanker(data.frame(suits = c(-1,-1,-1,-1,2,3)))
scoreFlushRanker(data.frame(suits = c(1,1,1,1,-1,2,2)))
scoreFlushRanker(data.frame(suits = c(1,2,3,4,-1,3,2)))

# This is now correct
scoreStraightFlushRanker <- function(oneHand)  {
  suits <- oneHand$suits
  oneHand <- oneHand$ranks
  
  wildCardCount <- sum(oneHand == -1)
  
  if(wildCardCount > 5){
    return(14/28)    
  }
  
  suits <- suits[oneHand != -1]
  oneHand <- oneHand[oneHand != -1]
  
  ordering = order(oneHand, decreasing=TRUE)  
  
  oneHand <- oneHand[ordering]
  suits <- suits[ordering]
  #print(suits)
  
  
  suits <- append(suits, suits[which(oneHand == 14)])
	oneHand <- append(oneHand,oneHand[which(oneHand == 14)])
	        # Handle the case of ace low

	for(startIndex in 1:length(oneHand)){
    straightRun <- 1
          # Always starts with the first card
    
    suit <- suits[startIndex]
    lastRank <- oneHand[startIndex]
    
    degreesOfFreedom <- wildCardCount
    
    i <- startIndex + 1
    while(i+1 <= length(oneHand) && oneHand[i] == lastRank){
	      i <- i+1
	  }	
    
    
	  while(i <= length(oneHand) && (straightRun + degreesOfFreedom < 5)) {
	    valid <- FALSE
	    rank <- oneHand[i]
	    
	    while(i <= length(oneHand) && oneHand[i] == rank){
	      if (suits[i]==suit) {valid <- TRUE}
	      i <- i+1
	    }	 

	    cardRun <- lastRank - rank
	            # Number of cards to test
	    if(cardRun < 0){
	      cardRun <- lastRank - 1
	            # For the case of Ace low
	    }
	    
	    degreesOfFreedom <- degreesOfFreedom - (cardRun-valid) # Subtract the current card from the valid run only if it's of the right suit
      if(degreesOfFreedom < 0){
        break
      }
	    straightRun <- straightRun + cardRun
	    
	    lastRank = rank
	  }
    
    if((straightRun + degreesOfFreedom >= 5)){
      return(min(14,oneHand[startIndex]+degreesOfFreedom))
    }
	}
	
	0
}
scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,2,1,1), ranks = c(2,3,4,5,6,7,8) ))
scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,1,1,2), ranks = c(2,3,4,5,6,7,8) ))
scoreStraightFlushRanker(data.frame(suits = c(1,1,1,1,-1,2,2), ranks = c(2,3,4,5,-1,7,8) ))

```

I am going to hang myself. This code was disgusting

```{r}

getRankChar <- function(rank){
  if(rank < 0)  return(" ")
  if(rank <= 10) return(rank)
  if(rank == 11) return("J") 
  if(rank == 12) return("Q") 
  if(rank == 13) return("K")
  if(rank == 14) return("A") 
}

getSuitChar <- function(suit){
  if(suit == 1)  return("\u2660")
  if(suit == 2)  return("\u2663")
  if(suit == 3)  return("\u2665")
  if(suit == 4)  return("\u2666")
  return("?")
}

cgiPlayers <- function(time, alias, position, cards) {
	nPlayers <- nrow(cards)
	width <- 30
	height <- 20
	X1 <- numeric(nPlayers)
	Y1 <- numeric(nPlayers)
	X2 <- numeric(nPlayers)
	Y2 <- numeric(nPlayers)
	X3 <- numeric(5)
	Y3 <- height-5.5
	#PRE-FLOP
	if (time == 1) {
		plot(0,0, xlim=c(0,width), ylim=c(0,height), axes=FALSE, xlab="", ylab="", cex= 0, main="Poker Simulator")
		text(width/2,Y3+.7, "Community")
		X4 <- c(width/2-7.5,width/2+1.5,width/2+1.5,width/2-7.5,width/2-7.5,width/2+1.5,width/2+4.5,width/2+4.5,
			width/2+1.5,width/2+1.5,width/2+4.5,width/2+7.5,width/2+7.5,width/2+4.5)
		Y4 <- c(Y3+.35,Y3+.35,Y3-.35,Y3-.35,Y3+.35,Y3+.35,Y3+.35,Y3-.35,Y3-.35,Y3+.35,Y3+.35,Y3+.35,Y3-.35,Y3-.35)
		points(X4,Y4,"l", col="green")
		if (nPlayers==2) {
			X1 <- seq(from = 10,to = width-10, length = 2)
			Y1 <- rep(3.5,2)
			}
		if (nPlayers==3) {
			X1 <- seq(from = 5,to = width-5, length = 3)
			Y1 <- rep(3.5,3)
			}
		if (nPlayers==4) {
			X1 <- c(5,seq(from = 10,to = width-10, length = 2),width-5)
			Y1 <- c(6,rep(3.5,2),6)
			}
		if (nPlayers==5) {
			X1 <- c(5,seq(from = 5,to = width-5, length = 3),width-5)
			Y1 <- c(6,rep(3.5,3),6)
			}
		if (nPlayers==6) {
			X1 <- c(rep(5,2),seq(from = 10,to = width-10, length = 2),rep(width-5,2))
			Y1 <- c(8.5,6,rep(3.5,2),6,8.5)
			}
		if (nPlayers==7) {
			X1 <- c(rep(5,2),seq(from = 5,to = width-5, length = 3),rep(width-5,2))
			Y1 <- c(8.5,6,rep(3.5,3),6,8.5)
			}
		if (nPlayers==8) {
			X1 <- c(rep(5,3),seq(from = 10,to = width-10, length = 2),rep(width-5,3))
			Y1 <- c(11,8.5,6,rep(3.5,2),6,8.5,11)
			}
		if (nPlayers==9) {
			X1 <- c(rep(5,3),seq(from = 5,to = width-5, length = 3),rep(width-5,3))
			Y1 <- c(11,8.5,6,rep(3.5,3),6,8.5,11)
			}
		for (i in 1:nPlayers) 
		{
				text(X1[i], Y1[i], alias[i])
				for (j in 1:2) {			
					#RANK
					X2 <- X1[i]-2+3*(j-1)
					Y2[i] <- Y1[i] - .5
					

					text(X2,Y2[i], getRankChar(cards[i,2*j-1]))
					text(X2+1,Y2[i], getSuitChar(cards[i,2*j])) #spades
				
				}
		}
	}		
	#FLOP
	if (time == 2 ) {
		X3 <- seq(from = width/2-6.5, by = 3, length = 3)
		for (i in 1:3) {
			text(X3[i],Y3, getRankChar(cards[1,3+2*i]))
			text(X3[i]+1,Y3, getSuitChar(cards[1,4+2*i])) 
				
		}
	}
	#TURN
	if (time == 3 ) {
		X3 <- seq(from = width/2-6.5, by = 3, length = 5)
		i <- 4	
		text(X3[i],Y3, getRankChar(cards[1,3+2*i]))
			text(X3[i]+1,Y3, getSuitChar(cards[1,4+2*i])) 
	}
	#RIVER	
	if (time == 4 ) {
	X3 <- seq(from = width/2-6.5, by = 3, length = 5)
		i <- 5	
		text(X3[i],Y3, getRankChar(cards[1,3+2*i]))
		text(X3[i]+1,Y3, getSuitChar(cards[1,4+2*i])) 
	}
}

```

```{r}
dotTransformToRank <- function(y) {
	rank <- (y-1) %% 13+2
	rank[which(y>=53)] <- -1
				#(y-1) %% 13+2: rank of this card. Wild card becomes -1
	rank
}

dotTransformToSuit <- function(y) {
	suit <- (y-1) %/% 13+1
	suit[which(y>=53)] <- -1
				#(y-1) %/% 13+1: suit of this card
	suit
}


dealCustom <- function(nPlayers, decksize) {
	nCards <- 2*nPlayers+5
	y <- numeric(nCards)
				#create a vector for the cards
	y <- sample(1:decksize, nCards, replace=FALSE, prob=rep(1/decksize,decksize))
				#deal numbers in \{1, 2, ... , 52\}
	y
}

handFrame <- function(players, board) {
  nPlayers = nrow(players)
  
  public = board[(nPlayers*2+1):length(board)]
	hands <- list()
				#create a variable for the cards
	for (i in 1:nPlayers) {
	  cards = append(players[i,],board)
	  hand = data.frame(ranks = dotTransformToRank(cards), suits =  dotTransformToSuit(cards))
	  hands[[i]] = hand
	  
		}
	hands
}

customRoundOfPoker <- function(customRankFunctions, wildCardNumber, numberOfPlayers, silent = F) {
	alias <- sprintf("Player %d", 1:numberOfPlayers)
	nPlayers <- length(alias)
	position <- nPlayers

	y <- dealCustom(nPlayers, 52+wildCardNumber)
	
	#print(y)
	
	players <- assignToPlayers(nPlayers, position, y)
	#print(players)
	board <- assignToBoard(y)
	#print(board)
	cards <- handFrame(players, board)

	playersIter <- matrix(1:length(cards))
	
	incremental <- rep(0,nPlayers)
	bestHand <- rep(0,nPlayers)
	for(f in length(customRankFunctions):1){
	  func <- customRankFunctions[[f]]
	  
	  for (i in playersIter) {
	    if(bestHand[i] == 0){
	      score <- func(cards[[i]])
	      
	      if(score){
	        bestHand[i] <- f
	        incremental[i] <- score 
	      }
	    }
	  }
	  #print(apply(playersIter, 1, function(x) {func(cards[[x]])}))# apply(scorePairRanker(cards)))
	}
	
	
	#print(bestHand)
	#print(incremental)

#score <- showdown(cards)
	winners <- bestHand == max(bestHand)
	#print(max(incremental[which(winners)]))
	#print(incremental == max(incremental[which(winners)]))
	#print(winners & incremental == max(incremental[which(winners)]))
	winners <- winners & incremental == max(incremental[which(winners)])
	winners <- which(winners)

	
	
	if(!silent){
	  cgiCards <- hand(players, board)
	  

	  round <- 1
  	cgiPlayers(round, alias, position, cgiCards)
  	round <- 2
  	cgiPlayers(round, alias, position, cgiCards)
  	round <- 3
  	cgiPlayers(round, alias, position, cgiCards)
	  round <- 4
  	cgiPlayers(round, alias, position, cgiCards)
  
  	cat("Please look at the graphics window to see the current hand.\n\nThe score of each player is one of the following:\n\t9 = Straight Flush\n\t8 = Four of a Kind\n\t7 = Full House\n\t6 = Flush\n\t5 = Straight\n\t4 = Three of a Kind\n\t3 = Two Pair\n\t2 = Pair\n\t1 = Highcard\nThe scores for this hand are:\n\t")
  	cat(sprintf("\n\t%s: %d",alias, bestHand))
  	cat("\nThe winners of this hand are Players",winners,".\n\nThank you for playing.\n")
  	
	  
	}
	
	#print(players)
	#print((players[winners,]))
	#print(dotTransformToRank(players[winners,]))
	#print(data.frame(col = dotTransformToRank(players[winners,])))
	
	# I can't seem to figure out how to standardize it for both cases, and I don't know why r is fighting me with this
	if(length(winners) <= 1){
	  winRanks <- matrix(dotTransformToRank(players[winners,]), byrow=F, ncol = 1)
	  winSuits <- matrix(dotTransformToSuit(players[winners,]), byrow=F, ncol = 1)
	} else {
	  winRanks <- matrix(dotTransformToRank(players[winners,]), byrow=T, nrow = length(winners))
	  winSuits <- matrix(dotTransformToSuit(players[winners,]), byrow=T, nrow = length(winners))
	}
	
  
  
  
  #print(winRanks)
  
	return (
	  list(winningHands = data.frame( 
	        ranks.1 = winRanks[1,] 
	      , ranks.2 = winRanks[2,]
	      , suits.1 = winSuits[1,]
	      , suits.2 = winSuits[2,])
	   , winningScore = bestHand[winners][1])
	)
}

# Default game of poker
customRoundOfPoker(list(scoreHighCard, scorePairRanker, scoreTwoPairRanker, scoreTripRanker,  scoreStraightRanker, scoreFlushRanker, scoreFullHouseRanker, scoreQuadRanker),0,9)

  # Default game of poker with 4 wildcards
customRoundOfPoker(list(scoreHighCard, scorePairRanker, scoreTwoPairRanker, scoreTripRanker,  scoreStraightRanker, scoreFlushRanker, scoreFullHouseRanker, scoreQuadRanker),4,9)

# Game of poker with no pairs
customRoundOfPoker(list(scoreHighCard, scoreTripRanker ,scoreQuadRanker, scoreStraightRanker ,scoreFullHouseRanker, scoreFlushRanker),4,9)



```

Here's a demonstration of how the data is output, and how to read it

```{r}

# Game of poker with no pairs
round <- customRoundOfPoker(list(scoreHighCard, scoreTripRanker ,scoreQuadRanker, scoreStraightRanker ,scoreFullHouseRanker, scoreFlushRanker),4,9, silent = T)

print( round)
print( round$winningHands[1,])
print( round$winningHands[1,1:2])
print( round$winningScore)

```


```{r}
normalPokerHands <- list(scoreHighCard, scorePairRanker, scoreTwoPairRanker, scoreTripRanker,  scoreStraightRanker, scoreFlushRanker, scoreFullHouseRanker, scoreQuadRanker)

# Here's what the loop would look like
scores = rep(0,length(normalPokerHands))
for(i in 1:1000){
  round <- customRoundOfPoker(normalPokerHands,1,10, silent = T)
  scores[round$winningScore] <- scores[round$winningScore] +1
  
  # firstHandRanks <- round$winningHands[1]
}

barplot(scores, names.arg = c("high","pair","two-pair","trip","straight","flush","full house","quad"))


```

